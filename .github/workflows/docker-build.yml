name: Build and Push Docker Image

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - architecture: amd64
            runner: ubuntu-24.04
            platform: linux/amd64
          - architecture: arm64
            runner: ubuntu-24.04-arm
            platform: linux/arm64
    outputs:
      images: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Debug Visualizer
            org.opencontainers.image.description=Debug visualizer web application
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Process tags for architecture
        id: arch-tags
        run: |
          # Get the base tags and add architecture suffix to each
          BASE_TAGS="${{ steps.meta.outputs.tags }}"
          ARCH_TAGS=""
          
          while IFS= read -r tag; do
            if [[ -n "$tag" ]]; then
              if [[ -z "$ARCH_TAGS" ]]; then
                ARCH_TAGS="${tag}-${{ matrix.architecture }}"
              else
                ARCH_TAGS="${ARCH_TAGS}\n${tag}-${{ matrix.architecture }}"
              fi
            fi
          done <<< "$BASE_TAGS"
          
          echo "arch-tags<<EOF" >> $GITHUB_OUTPUT
          echo -e "$ARCH_TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        if: github.event_name == 'push'
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.arch-tags.outputs.arch-tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Docker image (test build)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ matrix.architecture }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image info
        run: |
          echo "Built for architecture: ${{ matrix.architecture }}"
          echo "Platform: ${{ matrix.platform }}"
          echo "Runner: ${{ matrix.runner }}"
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "Image tags: ${{ steps.arch-tags.outputs.arch-tags }}"
          else
            echo "Test build completed for PR"
          fi

  merge:
    needs: build
    runs-on: ubuntu-24.04
    if: github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Debug Visualizer
            org.opencontainers.image.description=Debug visualizer web application
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Create and push multi-architecture manifest
        run: |
          # Get the tags from metadata (convert newlines to spaces for proper iteration)
          TAGS=$(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' ')
          
          # Create manifest for each tag
          for tag in $TAGS; do
            # Skip empty tags
            if [[ -z "$tag" ]]; then
              continue
            fi
            
            echo "Creating manifest for tag: $tag"
            
            # Create manifest from existing architecture-specific images
            docker buildx imagetools create -t "$tag" \
              "${tag}-amd64" \
              "${tag}-arm64"
            
            echo "Manifest created for $tag"
          done

      - name: Output merged image info
        run: |
          echo "Multi-architecture manifest created"
          echo "Image tags: ${{ steps.meta.outputs.tags }}"
          echo "Supported platforms: linux/amd64, linux/arm64"
